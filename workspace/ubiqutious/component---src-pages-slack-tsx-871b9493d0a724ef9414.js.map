{"version":3,"file":"component---src-pages-slack-tsx-871b9493d0a724ef9414.js","mappings":"qKAMA,MAAMA,EAASA,EAAGC,cAEdC,EAAAA,cAAA,OACEC,UAAU,sBACVC,MAAO,CACLC,gBAAiB,YACjBC,MAAO,qBACPC,WAAY,kDAGdL,EAAAA,cAACM,EAAAA,MAAK,CAACC,MAAM,WACbP,EAAAA,cAACM,EAAAA,MAAK,CAACC,MAAM,WACbP,EAAAA,cAAA,YACGD,GAEHC,EAAAA,cAACM,EAAAA,MAAK,CAACC,MAAM,YAKnBT,EAAOU,UAAY,CACjBT,SAAUU,IAAAA,KAAeC,YAG3B,K,kECbA,MAAMC,EAAMA,EAAGC,QAAOC,cAAaC,kBACjC,MAAM,KAAEC,IAASC,EAAAA,EAAAA,gBAAe,aAe3BH,IACHA,EAAcE,EAAKE,aAAaJ,aAG7BC,IACHA,EAAc,2BAGhB,MAAMI,EAAYN,EAAQ,cAE1B,OACEZ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQkB,GACRlB,EAAAA,cAAA,QAAMmB,KAAK,cAAcC,QAASP,IAClCb,EAAAA,cAAA,QAAMmB,KAAK,WAAWC,QAASF,IAC/BlB,EAAAA,cAAA,QAAMmB,KAAK,iBAAiBC,QAASP,IACrCb,EAAAA,cAAA,QAAMmB,KAAK,UAAUC,QAAQ,YAC7BpB,EAAAA,cAAA,QAAMmB,KAAK,WAAWC,QAASL,EAAKE,aAAaI,QAAU,IAAMP,IACjEd,EAAAA,cAAA,QAAMmB,KAAK,eAAeC,QAAQ,wBAClCpB,EAAAA,cAAA,QAAMmB,KAAK,eAAeC,QAAQ,cAClCpB,EAAAA,cAAA,QAAMmB,KAAK,gBAAgBC,QAASL,EAAKE,aAAaI,QAAU,IAAMP,IACtEd,EAAAA,cAAA,QAAMmB,KAAK,kBAAkBC,QAAQ,cACrCpB,EAAAA,cAAA,QAAMmB,KAAK,gBAAgBC,QAASF,IACpClB,EAAAA,cAAA,QAAMmB,KAAK,sBAAsBC,QAASP,IAC1Cb,EAAAA,cAAA,QAAMsB,IAAI,aAAaC,KAAK,WAAWC,KAAK,uHAC5CxB,EAAAA,cAAA,UAAQyB,IAAI,+GACX,EAIPd,EAAIe,aAAe,CACjBd,MAAO,YAGTD,EAAIH,UAAY,CACdI,MAAOH,IAAAA,OAAiBC,YAG1B,K,kGC5BA,UArCiBiB,IACf3B,EAAAA,cAACF,EAAAA,EAAM,KACLE,EAAAA,cAAA,WAASC,UAAU,8BACjBD,EAAAA,cAAA,OAAKC,UAAU,eACbD,EAAAA,cAAA,OAAKC,UAAU,6BACbD,EAAAA,cAAA,MAAIC,UAAU,YAAW,4BAE3BD,EAAAA,cAAA,QACE4B,OAAO,8GACPC,OAAO,OACPC,OAAO,UAEP9B,EAAAA,cAAA,OAAKC,UAAU,cACbD,EAAAA,cAAA,aAAO,gBACLA,EAAAA,cAAA,SACE+B,aAAa,QACbZ,KAAK,eACLa,YAAY,aACZT,KAAK,QACLtB,UAAU,eACVgC,UAAQ,KAGZjC,EAAAA,cAAA,WACAA,EAAAA,cAAA,UACEC,UAAU,uBACVsB,KAAK,UACN,mBAYN,MAAMW,EAAOA,IAClBlC,EAAAA,cAACW,EAAAA,EAAG,CAACC,MAAM,gB","sources":["webpack://adoptium-website/./src/components/Layout/index.tsx","webpack://adoptium-website/./src/components/Seo/index.tsx","webpack://adoptium-website/./src/pages/slack.tsx"],"sourcesContent":["import * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { Slice } from 'gatsby'\n\nimport './layout.scss'\n\nconst Layout = ({ children }) => {\n  return (\n    <div\n      className='container-fluid p-0'\n      style={{\n        backgroundColor: 'var(--bg)',\n        color: 'var(--text-normal)',\n        transition: 'color 0.2s ease-out, background 0.2s ease-out'\n      }}\n    >\n      <Slice alias='navbar' />\n      <Slice alias='banner' />\n      <main>\n        {children}\n      </main>\n      <Slice alias='footer' />\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { useStaticQuery, graphql } from 'gatsby'\n\ninterface Props {\n  title: string\n  description?: string\n  twitterCard?: string\n}\n\nconst Seo = ({ title, description, twitterCard }: Props): JSX.Element => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  if (!description) {\n    description = site.siteMetadata.description;\n  }\n\n  if (!twitterCard) {\n    twitterCard = \"images/social-image.png\";\n  }\n\n  const siteTitle = title + \" | Adoptium\";\n\n  return (\n    <>\n      <title>{siteTitle}</title>\n      <meta name=\"description\" content={description} />\n      <meta name=\"og:title\" content={siteTitle} />\n      <meta name=\"og:description\" content={description} />\n      <meta name=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={site.siteMetadata.siteUrl + '/' + twitterCard} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@adoptium\" />\n      <meta name=\"twitter:image\" content={site.siteMetadata.siteUrl + '/' + twitterCard} />\n      <meta name=\"twitter:creator\" content=\"@adoptium\" />\n      <meta name=\"twitter:title\" content={siteTitle} />\n      <meta name=\"twitter:description\" content={description} />\n      <link rel='stylesheet' type='text/css' href='//www.eclipse.org/eclipse.org-common/themes/solstice/public/stylesheets/vendor/cookieconsent/cookieconsent.min.css' />\n      <script src='//www.eclipse.org/eclipse.org-common/themes/solstice/public/javascript/vendor/cookieconsent/default.min.js' />\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  title: 'Adoptium'\n}\n\nSeo.propTypes = {\n  title: PropTypes.string.isRequired\n}\n\nexport default Seo\n","import * as React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport Seo from '../components/Seo'\n\nconst JoinPage = () => (\n  <Layout>\n    <section className='py-5 text-center container'>\n      <div className='row py-lg-5'>\n        <div className='col-lg-8 col-md-8 mx-auto'>\n          <h1 className='fw-light'>Join our Slack channel!</h1>\n        </div>\n        <form\n          action='https://docs.google.com/forms/u/1/d/e/1FAIpQLSdxrFvVu49Nx0zQKZAfHe_43H3H6BOhRiRXayQjjAmlbnSJfg/formResponse'\n          method='post'\n          target='_blank'\n        >\n          <div className='form-group'>\n            <label>Email address\n              <input\n                autoComplete='email'\n                name='emailAddress'\n                placeholder='Your email'\n                type='email'\n                className='form-control'\n                required\n              />\n            </label>\n            <br />\n            <button\n              className='btn btn-primary mt-3'\n              type='submit'\n            >\n              Invite Me!\n            </button>\n          </div>\n        </form>\n      </div>\n    </section>\n  </Layout>\n)\n\nexport default JoinPage\n\nexport const Head = () => (\n  <Seo title='Slack Signup' />\n)\n\nexport const query = graphql`\n  query ($language: String!) {\n    locales: allLocale(filter: {language: {eq: $language}}) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`\n"],"names":["Layout","children","React","className","style","backgroundColor","color","transition","Slice","alias","propTypes","PropTypes","isRequired","Seo","title","description","twitterCard","site","useStaticQuery","siteMetadata","siteTitle","name","content","siteUrl","rel","type","href","src","defaultProps","JoinPage","action","method","target","autoComplete","placeholder","required","Head"],"sourceRoot":""}