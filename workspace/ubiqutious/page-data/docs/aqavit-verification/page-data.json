{"componentChunkName":"component---src-templates-asciidoc-template-tsx","path":"/docs/aqavit-verification/","result":{"data":{"asciidoc":{"html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The AQAvit project was created to “make quality certain to happen.” AQAvit verification is achieved through the process of running and passing a prescribed and versioned set of tests in the AQAvit test suite. The <a href=\"https://www.eclipse.org/legal/eclipse-foundation-quality-verification-suite-license.php\" target=\"_blank\" rel=\"noopener\">Eclipse Foundation Quality Verification Software License (QVSL)</a> requires those who wish to verify their product to share a summary of the test results by which verification was achieved. This document describes how to run the AQAvit verification tests, check verification has passed, and collect the required test results for publication.</p>\n</div>\n<div class=\"paragraph\">\n<p>AQAvit verification is one of the criteria for listing in the <a href=\"/marketplace\" target=\"_blank\" rel=\"noopener\">Adoptium Marketplace</a>. Leveraging the AQAvit test suite to ensure the quality of the binaries listed in the Adoptium Marketplace not only communicates to consumers how serious we are about quality, but also consolidates the good verification practices of the Adoptium Working Group members under a centralized effort. AQAvit aligns its test suite standards with the ever-changing requirements of the user base.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_overview\">Overview</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The AQAvit test suite is a large set of tests, many contributed to the AQAvit project and some pulled from a variety of open-source projects, that serve to verify the quality of OpenJDK binaries.  The suite is suitable for testing Java SE 8 or higher versions on all <a href=\"/supported-platforms\" target=\"_blank\" rel=\"noopener\">supported platforms</a>.  To verify binaries, testers clone a specified release of the aqa-tests github repository (the <a href=\"https://github.com/adoptium/aqa-tests/releases\" target=\"_blank\" rel=\"noopener\">latest stable release</a> of the aqa-tests repository), configure their test environment, execute and pass the required test targets against each binary they plan to verify and make the results of those test runs available as per the QVSL.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_aqavit_test_targets_to_run\">AQAvit Test Targets to Run</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The tests are divided into different groups and those groups are split into 3 levels.  This logical categorization of the tests provides flexibility and granularity and can be visually represented in a grid.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/gridview.png\" alt=\"grid view\" width=\"350\" height=\"182\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For the current release of AQAvit, the required set of top-level test targets to run are [sanity.functional, extended.functional, special.functional, sanity.openjdk, extended.openjdk, sanity.system, extended.system, sanity.perf, extended.perf].  In subsequent AQAvit releases, targets will be added to raise quality bar even higher.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_details_regarding_test_execution\">Details Regarding Test Execution</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>AQAvit can be run in various CI/CD environments as well as directly via command-line in a container or on a test machine that has the <a href=\"https://github.com/adoptium/aqa-tests/blob/master/doc/Prerequisites.md\" target=\"_blank\" rel=\"noopener\">test prerequisites</a> installed.  The basic steps are the same in any environment.</p>\n</div>\n<details>\n<summary class=\"title\">Run AQAvit via Command-line</summary>\n<div class=\"content\">\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 50%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"></td>\n<td class=\"tableblock halign-left valign-top\"></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/aqacert_basic_steps.png\" alt=\"basic steps\" width=\"350\" height=\"350\">\n</div>\n</div></div></td>\n<td class=\"tableblock halign-left valign-top\"><div class=\"content\"><div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">git clone --depth 1 --branch v0.9.6-release https://github.com/adoptium/aqa-tests.git\n\nexport TEST_JDK_HOME=<path to binary>\nexport USE_TESTENV_PROPERTIES=true\nexport JDK_VERSION=17\nexport JDK_IMPL=hotspot\nexport BUILD_LIST=functional\n\ncd aqa-tests\n./get.sh\n./compile.sh\ncd TKG\nmake _sanity.functional\n…\nmake _extended.system\n\nCollect *.tap file and metadata file\nArchive <results>.zip\nPublish <results>.zip</code></pre>\n</div>\n</div></div></td>\n</tr>\n</tbody>\n</table>\n</div>\n</details>\n<details>\n<summary class=\"title\">Run AQAvit via Github Workflow</summary>\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>The AQAvit project created a Github action that allows for running the AQAvit test suite from workflow files.  The <code>run-aqa</code> action in the <a href=\"https://github.com/adoptium/run-aqa\" target=\"_blank\" rel=\"noopener\">run-aqa repository</a> allows users to pass in custom OpenJDK binaries for verification.  Here is an example workflow file that can run sanity level targets on the 3 supported platforms available as Github runners:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\">name: Run AQAvit\n\non:\n  workflow_dispatch: # Allows the job to be manually triggered\n\nenv:  # Links to the JDK build under test and the native test libs\n  USE_TESTENV_PROPERTIES: true\n  BINARY_SDK: https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.14.1%2B1/OpenJDK11U-jdk_x64_linux_hotspot_11.0.14.1_1.tar.gz\n  NATIVE_LIBS: https://ci.adoptium.net/job/build-scripts/job/jobs/job/jdk11u/job/jdk11u-linux-x64-hotspot/lastSuccessfulBuild/artifact/workspace/target/OpenJDK11U-testimage_x64_linux_hotspot_2022-02-12-17-06.tar.gz\n\njobs:\n  run_aqa:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        target: [sanity, extended]\n        suite: [functional, openjdk, system, perf]\n        include:\n          - target: special\n            suite: functional\n\n    steps:\n\n    - name: Run AQA Tests - ${{ matrix.target }}.${{ matrix.suite }}\n      uses: adoptium/run-aqa@v2\n      with:\n        version: '11'\n        jdksource: 'customized'\n        customizedSdkUrl: ${{ env.BINARY_SDK }} ${{ env.NATIVE_LIBS }}\n        aqa-testsRepo: 'adoptium/aqa-tests:v0.9.6-release' # Make sure this branch is set to the latest release branch\n        build_list: ${{ matrix.suite }}\n        target: _${{ matrix.target }}.${{ matrix.suite }}\n\n    - uses: actions/upload-artifact@v4\n      if: always() # Always run this step (even if the tests failed)\n      with:\n        name: test_output\n        path: ./**/output_*/*.tap</code></pre>\n</div>\n</div>\n</div>\n</details>\n<details>\n<summary class=\"title\">Run AQAvit via Jenkins</summary>\n<div class=\"content\">\n<div class=\"paragraph\">\n<p>If you are using the AQAvit Jenkins test pipeline code available from the aqa-tests repository and described in the documentation under the <a href=\"https://github.com/adoptium/aqa-tests/blob/master/doc/userGuide.md#jenkins-setup-and-running\" target=\"_blank\" rel=\"noopener\">Jenkins Setup and Running</a> section, then these are additional parameters that you will set in order to run the required test targets.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># Set Jenkins job parameters\nADOPTOPENJDK_REPO=https://github.com/adoptium/aqa-tests.git\nADOPTOPENJDK_BRANCH=v0.9.6-release\nUSE_TESTENV_PROPERTIES=true\n\n# Execute test targets\nTARGET=sanity.functional and subsequently [extended.functional|special.functional|sanity.openjdk|extended.openjdk|sanity.system|extended.system|sanity.perf|extended.perf]\n\n# Collect and publish results\nCollect *.tap file and metadata file\nArchive <results>.zip\n\nPublish <results>.zip</code></pre>\n</div>\n</div>\n</div>\n</details>\n<div class=\"paragraph\">\n<p>The <code>.tap</code> files and metadata files contain timestamps and information about the binary under test.  This information is collected from <code>java -version</code> output, release file information and querying some system properties during the test run.  Where applicable, the information should match with the binary listed in the marketplace.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_verifying_results\">Verifying Results</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The AQAvit test suite produces test result files and metadata files at the end of the test execution. Upon running and passing each of the nine required test targets, the result files and metadata files are to be gathered and shared.  For test targets that contain failures, the root cause of the failure should be addressed and the target can be rerun and an updated test result file produced and shared.</p>\n</div>\n<div class=\"paragraph\">\n<p>Test result files that are produced follow a certain naming convention and use a simple TAP (Test Anything Protocol).  When top-level targets are run serially, a single .tap file is produced, for example:</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Test_openjdk11_hs_sanity.system_aarch64_linux.tap</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>contains version, impl/distribution, test target and platform information in the name, and its contents look like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code># Timestamp: Wed Mar  2 10:51:55 2022 UTC\n1..168\nok 1 - MachineInfo_0\n  ---\n    duration_ms: 581\n  ...\nok 2 - ClassLoadingTest_5m_0\n  ---\n    duration_ms: 304339\n  ...\nok 3 - ClassLoadingTest_5m_1\n  ---\n    duration_ms: 303883\n  ...\netc.\n  ...\nok 168 - MauveMultiThrdLoad_5m_1\n  ---\n    duration_ms: 304296\n  ...</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>One can see in this example that the top-level target sanity.system contains 168 sub-targets.  Of the set of expected subtargets, some may be 'skipped' due to being filtered out as not applicable for a particular version or platform, but there must be none that failed.  Within the tap file, they will show as 'not ok' if they have failed.  Failing subtargets can be rerun individually and the tap file produced for that individual run can be included in the &lt;results&gt;.zip file to indicate that the binary under test was able to pass all expected targets.</p>\n</div>\n<details>\n<summary class=\"title\">AQAvit Verification Demonstration</summary>\n<div class=\"content\">\n<div class=\"videoblock\">\n<div class=\"content\">\n<iframe src=\"https://www.youtube.com/embed/1EUi3iTZSzg?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n</div>\n</details>\n</div>\n</div>","document":{"title":"AQAvit&#8482; Verification","main":"AQAvit&#8482; Verification"},"fields":{"slug":"/docs/aqavit-verification/","relativePath":"docs/aqavit-verification/index.adoc"},"pageAttributes":{"authors":"gdams, smlambert, llxia, tellison, xavierfacq","based_on":null}},"locales":{"edges":[]}},"pageContext":{"title":"AQAvit&#8482; Verification","locale":"en","language":"en","i18n":{"language":"en","languages":["en","en-GB","de","es","fr","zh-CN"],"defaultLanguage":"en","generateDefaultLanguagePage":false,"routed":false,"originalPath":"/docs/aqavit-verification/","path":"/docs/aqavit-verification/"}}},"staticQueryHashes":["3235583029","764694655"],"slicesMap":{"banner":"banner","footer":"footer","navbar":"navbar"}}