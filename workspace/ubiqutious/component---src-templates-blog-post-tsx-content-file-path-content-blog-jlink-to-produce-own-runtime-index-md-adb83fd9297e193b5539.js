"use strict";(self.webpackChunkadoptium_website=self.webpackChunkadoptium_website||[]).push([[9634],{4695:function(e,t,a){a.r(t),a.d(t,{Head:function(){return w},default:function(){return b},formatDiv:function(){return f}});var n=a(8453),l=a(6540);function s(e){const t=Object.assign({p:"p",h2:"h2",em:"em",strong:"strong",a:"a",span:"span"},(0,n.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.p,null,"With the release of the latest LTS version of Temurin we have decided not to ship Java Runtime Environments (JREs) separately from the JDK downloads.\nThis post will show you how to create your own runtime for Java 17+ which is comparable to a legacy JRE if required."),"\n",l.createElement(t.h2,null,"Why have you decided to stop shipping JREs?"),"\n",l.createElement(t.p,null,l.createElement(t.em,null,l.createElement(t.strong,null,"NOTE: This paragraph has been superceded since we are now shipping JREs with 17+ again - see ",l.createElement(t.a,{href:"https://adoptium.net/blog/2021/12/eclipse-temurin-jres-are-back/"},"https://adoptium.net/blog/2021/12/eclipse-temurin-jres-are-back/")," for the details, however we still recommend using jlink to produce your own cut down java runtimes where possible"))),"\n",l.createElement(t.p,null,"While the OpenJDK build process still has support for building a JRE via the\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">legacy-jre</code>'}})," target it is, as the name suggests, legacy functionality.  The\nnew LTS version provided us with an opportunity to make a clean break and we\nhave decided now is the time to no longer provide JREs since there are more\nefficient options available. It also simplifies the list of downloads we have\navailable and reduces our testing overhead.  We will continue to produce\nthem for the existing 8 and 11 versions to retain continuity for those using\nthem.  The discussion on this happened in\n",l.createElement(t.a,{href:"https://github.com/adoptium/temurin-build/issues/2683"},"this issue"),"."),"\n",l.createElement(t.p,null,"The good news is that it is very easy to produce your own runtime that looks\ncomparable to a legacy JRE, and in many cases it can be smaller than an old\nlegacy JRE would be!"),"\n",l.createElement(t.h2,null,"Sounds good. So how do I create my own “JRE”?"),"\n",l.createElement(t.p,null,"Creating your own runtime that is comparable to a legacy JRE is simpler\nthen you might think.  Firstly, download and extract the JDK archive.\nSecond, use ",l.createElement(t.a,{href:"https://docs.oracle.com/en/java/javase/17/docs/specs/man/jlink.html"},"jlink"),"\nto create your own runtime that will be smaller, yet still provide\nequivalent functionality to the legacy JRE.  Replace ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk-17+35</code>'}})," in the examples\nbelow with the version of Java you are working with, and replace the forward\nslashes with the path separator on your platform (e.g.  ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\\</code>'}})," for Windows):"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">   jdk-17+35/bin/jlink --add-modules ALL-MODULE-<span class="token environment constant">PATH</span> <span class="token parameter variable">--output</span> jdk-17+35-jre <span class="token punctuation">\\</span>\n      --strip-debug --no-man-pages --no-header-files <span class="token parameter variable">--compress</span><span class="token operator">=</span><span class="token number">2</span></code></pre></div>'}}),"\n",l.createElement(t.p,null,"Once you have done that, the contents of the ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk-17+35-jre</code>'}})," will work in\nplace of a legacy JRE and be significantly smaller expanded on disk than\neither the JDK or legacy JRE would be."),"\n",l.createElement(t.h2,null,"What are the disk space savings?"),"\n",l.createElement(t.p,null,"It will vary by platform and the version of Java you are using, but using\none example with the ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk-17+35</code>'}})," release, the full JDK for one platform is\nabout 312Mb on disk.  The jlinked runtime using the above command is about\n95Mb."),"\n",l.createElement(t.h2,null,"Is this identical to the legacy JRE?"),"\n",l.createElement(t.p,null,"Not quite. By default there are some extra modules included via the\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ALL-MODULE-PATH</code>'}})," list than would be included in the legacy JRE. You can list\nthe ones which your runtime supports with ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">java --list-modules</code>'}}),". At the time\nof writing, using the ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk-17+35</code>'}})," release, the list of extra modules is as\nfollows:"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="output"><pre class="language-output"><code class="language-output"> jdk.attach\n jdk.compiler\n jdk.editpad\n jdk.hotspot.agent\n jdk.internal.ed\n jdk.internal.jvmstat\n jdk.internal.le\n jdk.internal.opt\n jdk.jartool\n jdk.javadoc\n jdk.jcmd\n jdk.jconsole\n jdk.jdeps\n jdk.jdi\n jdk.jlink\n jdk.jpackage\n jdk.jshell\n jdk.jstatd\n jdk.random\n jdk.unsupported.desktop</code></pre></div>'}}),"\n",l.createElement(t.p,null,"Also, to be able to support some of those modules, you will still have tools\nlike ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">javac</code>'}}),", ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jlink</code>'}})," and others in the runtime.  The ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">--add-modules</code>'}}),"\ncommand accepts a comma seperated list of modules instead of the full list\nimplied by ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ALL-MODULE-PATH</code>'}}),".  You can use a comma-separated set of modules\nfrom the ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">--list-modules</code>'}})," output to limit it further.  As an example you\ncould list all of the modules other than the ones in the list above.  Doing\nso will reduce the size further, to around 66Mb, saving an extra 29Mb."),"\n",l.createElement(t.p,null,"As of ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk-17+35</code>'}})," the full set of modules needed to do this is shown in the\nfollowing command:"),"\n",l.createElement(t.p,null,l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk-17+35/bin/jlink --add-modules java.base,java.compiler,java.datatransfer,java.desktop,java.instrument,java.logging,java.management,java.management.rmi,java.naming,java.net.http,java.prefs,java.rmi,java.scripting,java.se,java.security.jgss,java.security.sasl,java.smartcardio,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto,jdk.accessibility,jdk.charsets,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.dynalink,jdk.httpserver,jdk.incubator.foreign,jdk.incubator.vector,jdk.internal.vm.ci,jdk.internal.vm.compiler,jdk.internal.vm.compiler.management,jdk.jdwp.agent,jdk.jfr,jdk.jsobject,jdk.localedata,jdk.management,jdk.management.agent,jdk.management.jfr,jdk.naming.dns,jdk.naming.rmi,jdk.net,jdk.nio.mapmode,jdk.sctp,jdk.security.auth,jdk.security.jgss,jdk.unsupported,jdk.xml.dom,jdk.zipfs --output jre-17+35 --strip-debug --no-man-pages --no-header-files --compress=2</code>'}})),"\n",l.createElement(t.h2,null,"Can I make my runtime even smaller?"),"\n",l.createElement(t.p,null,"As mentioned in the introduction, yes you can!  You just need to identify which modules your\napplication requires.  You can do this with the\n",l.createElement(t.a,{href:"https://docs.oracle.com/en/java/javase/17/docs/specs/man/jdeps.html"},"jdeps"),"\ncommand.  For example if I take a simple “Hello World!” application I can\nget the list of modules it requires as follows:"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ jdk-17+35/bin/jdeps Hello.class\nHello.class -<span class="token operator">></span> java.base\n   <span class="token operator">&lt;</span>unnamed<span class="token operator">></span>        -<span class="token operator">></span> java.io        java.base\n   <span class="token operator">&lt;</span>unnamed<span class="token operator">></span>        -<span class="token operator">></span> java.lang      java.base</code></pre></div>'}}),"\n",l.createElement(t.p,null,"This first line shows that my simple application only requires the\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">java.base</code>'}})," module.  In a more complicated example there will be several of\nthese present in the output.  The rest of the output is a breakdown of what\npackages my application uses and which modules they relate to.  I can\ntherefore create an even smaller custom runtime that will be suitable for my\napplication using the following ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jlink</code>'}})," command:"),"\n",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">   jdk-17+35/bin/jlink --add-modules java.base <span class="token parameter variable">--output</span> jdk-17+35-minimaljre <span class="token punctuation">\\</span>\n      --strip-debug --no-man-pages --no-header-files <span class="token parameter variable">--compress</span><span class="token operator">=</span><span class="token number">2</span></code></pre></div>'}}),"\n",l.createElement(t.p,null,"And the new runtime, which comes in at only 32Mb, will still be able to run\nmy “Hello World” application.  From this you can see that using jlink you\ncan generate custom runtimes for your application which are even smaller\nthan any legacy JRE we could ship to you."),"\n",l.createElement(t.p,null,"The ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdeps</code>'}})," command can also be given a jar file instead of a class and show\nyou all of the modules your packaged application requires."),"\n",l.createElement(t.p,null,l.createElement(t.strong,null,"NOTE:")," In some cases the cryptography modules may not get picked up by\njdeps. If your application uses encryption and you hit problems you may need\nto add ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk.crypto.ec</code>'}})," to the list of modules that you include."),"\n",l.createElement(t.h2,null,"I love this! Does it work for all Java versions?"),"\n",l.createElement(t.p,null,"The ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jlink</code>'}})," command was introduced when the module system was introduced in\nOpenJDK. For this reason it is not available in Java 8, but is in all later\nsupported versions."))}var o=function(e={}){const{wrapper:t}=Object.assign({},(0,n.RP)(),e.components);return t?l.createElement(t,e,l.createElement(s,e)):s(e)},r=a(4755),i=a(1197),c=a(5895),d=a(8297),m=a(720),u=a(9694),p=a(548),h=a(1169),g=a(1939),j=a(9122),y=a(279);function k(){return k=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)({}).hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},k.apply(null,arguments)}const f=e=>e.dangerouslySetInnerHTML.__html.includes('class="language-text"')?l.createElement("code",e):l.createElement("div",e),v={GuestPost:u.A,blockquote:e=>l.createElement("blockquote",k({style:{paddingLeft:"1.5rem",borderLeft:".3rem solid hsla(0,0%,0%,0.9)"},className:"blockquote"},e)),table:e=>l.createElement("table",k({className:"table table-hover"},e)),thead:e=>l.createElement("thead",k({className:"table-dark"},e)),li:e=>l.createElement("li",k({style:{marginBottom:"1.5em"}},e)),img:e=>l.createElement(y.A,e),div:f},E=({data:e,pageContext:t,location:a,children:s})=>{const o=e.mdx,{previous:c,next:u}=t,y=m[o.frontmatter.author],k=o.frontmatter.tags;return l.createElement(i.A,null,l.createElement("section",{className:"py-5 container"},l.createElement("div",{className:"row py-lg-5"},l.createElement("div",{className:"col-lg-9 col-md-9 mx-auto"},l.createElement("article",null,l.createElement("header",{className:"pb-5"},l.createElement("h1",{className:"mb-0",style:{fontWeight:"900"}},o.frontmatter.title),l.createElement(p.A,{date:o.frontmatter.date,author:y.name,identifier:o.frontmatter.author}),l.createElement(h.A,{location:a,siteMetadata:e.site.siteMetadata,post:o.frontmatter})),l.createElement(n.xA,{components:v},s),l.createElement(g.A,{tags:k}),l.createElement(j.A,null),l.createElement("hr",{className:"p-3"}),l.createElement("footer",{className:"pb-5"},l.createElement(d.Ay,{identifier:o.frontmatter.author,author:y}))),l.createElement("div",null,l.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},l.createElement("li",null,u&&l.createElement(r.Link,{to:u.fields.postPath,rel:"next"},"← ",u.frontmatter.title)),l.createElement("li",null,c&&l.createElement(r.Link,{to:c.fields.postPath,rel:"prev"},c.frontmatter.title," →"))))))))};function b(e){return l.createElement(E,e,l.createElement(o,e))}const w=({data:e})=>{const t=e.mdx;let a="";return t.frontmatter&&t.frontmatter.featuredImage&&(a=t.frontmatter.featuredImage.childImageSharp.gatsbyImageData.images.fallback.src),l.createElement(c.A,{title:t.frontmatter.title,description:t.frontmatter.description||t.excerpt,twitterCard:a})}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-jlink-to-produce-own-runtime-index-md-adb83fd9297e193b5539.js.map