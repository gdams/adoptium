{"version":3,"file":"53b999d3cf15b8501dae9e4fddebe6c29d866aef-c0f4465d07db360f1d4b.js","mappings":"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","sources":["webpack://adoptium-website/./node_modules/@mui/material/ListSubheader/listSubheaderClasses.js","webpack://adoptium-website/./node_modules/@mui/material/ListSubheader/ListSubheader.js","webpack://adoptium-website/./node_modules/@mui/material/internal/svg-icons/Close.js","webpack://adoptium-website/./node_modules/@mui/material/Autocomplete/autocompleteClasses.js","webpack://adoptium-website/./node_modules/@mui/material/Autocomplete/Autocomplete.js","webpack://adoptium-website/./node_modules/@mui/material/useAutocomplete/useAutocomplete.js","webpack://adoptium-website/./node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListSubheaderUtilityClass(slot) {\n  return generateUtilityClass('MuiListSubheader', slot);\n}\nconst listSubheaderClasses = generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);\nexport default listSubheaderClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport { getListSubheaderUtilityClass } from \"./listSubheaderClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    disableGutters,\n    inset,\n    disableSticky\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']\n  };\n  return composeClasses(slots, getListSubheaderUtilityClass, classes);\n};\nconst ListSubheaderRoot = styled('li', {\n  name: 'MuiListSubheader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  boxSizing: 'border-box',\n  lineHeight: '48px',\n  listStyle: 'none',\n  color: (theme.vars || theme).palette.text.secondary,\n  fontFamily: theme.typography.fontFamily,\n  fontWeight: theme.typography.fontWeightMedium,\n  fontSize: theme.typography.pxToRem(14),\n  variants: [{\n    props: {\n      color: 'primary'\n    },\n    style: {\n      color: (theme.vars || theme).palette.primary.main\n    }\n  }, {\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: 'inherit'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => !ownerState.disableGutters,\n    style: {\n      paddingLeft: 16,\n      paddingRight: 16\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.inset,\n    style: {\n      paddingLeft: 72\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => !ownerState.disableSticky,\n    style: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 1,\n      backgroundColor: (theme.vars || theme).palette.background.paper\n    }\n  }]\n})));\nconst ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiListSubheader'\n  });\n  const {\n    className,\n    color = 'default',\n    component = 'li',\n    disableGutters = false,\n    disableSticky = false,\n    inset = false,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    color,\n    component,\n    disableGutters,\n    disableSticky,\n    inset\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListSubheaderRoot, {\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nif (ListSubheader) {\n  ListSubheader.muiSkipListHighlight = true;\n}\nprocess.env.NODE_ENV !== \"production\" ? ListSubheader.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   * @default false\n   */\n  disableSticky: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader is indented.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListSubheader;","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n *\n * Alias to `Clear`.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'expanded', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","'use client';\n\nvar _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport useAutocomplete, { createFilterOptions } from \"../useAutocomplete/index.js\";\nimport Popper from \"../Popper/index.js\";\nimport ListSubheader from \"../ListSubheader/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport IconButton from \"../IconButton/index.js\";\nimport Chip from \"../Chip/index.js\";\nimport inputClasses from \"../Input/inputClasses.js\";\nimport inputBaseClasses from \"../InputBase/inputBaseClasses.js\";\nimport outlinedInputClasses from \"../OutlinedInput/outlinedInputClasses.js\";\nimport filledInputClasses from \"../FilledInput/filledInputClasses.js\";\nimport ClearIcon from \"../internal/svg-icons/Close.js\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport autocompleteClasses, { getAutocompleteUtilityClass } from \"./autocompleteClasses.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [`& .${autocompleteClasses.tag}`]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [`& .${autocompleteClasses.input}`]: {\n        opacity: 1\n      }\n    }\n  }, {\n    props: {\n      multiple: true\n    },\n    style: {\n      [`& .${autocompleteClasses.inputRoot}`]: {\n        flexWrap: 'wrap'\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => ({\n    ...styles.popupIndicator,\n    ...(ownerState.popupOpen && styles.popupIndicatorOpen)\n  })\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  variants: [{\n    props: {\n      disablePortal: true\n    },\n    style: {\n      position: 'absolute'\n    }\n  }]\n})));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(memoTheme(({\n  theme\n}) => ({\n  ...theme.typography.body1,\n  overflow: 'auto'\n})));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n})));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(memoTheme(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n})));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(memoTheme(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n})));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps: ChipPropsProp,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps,\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp,\n    isOptionEqualToValue,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    ListboxComponent: ListboxComponentProp,\n    ListboxProps: ListboxPropsProp,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus = false,\n    openText = 'Open',\n    options,\n    PaperComponent: PaperComponentProp,\n    PopperComponent: PopperComponentProp,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slots = {},\n    slotProps = {},\n    value: valueProp,\n    ...other\n  } = props;\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    componentName: 'Autocomplete'\n  });\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    ref: listboxRef,\n    ...otherListboxProps\n  } = getListboxProps();\n  const defaultGetOptionLabel = option => option.label ?? option;\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    ...props,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots: {\n      paper: PaperComponentProp,\n      popper: PopperComponentProp,\n      ...slots\n    },\n    slotProps: {\n      chip: ChipPropsProp,\n      listbox: ListboxPropsProp,\n      ...componentsProps,\n      ...slotProps\n    }\n  };\n  const [ListboxSlot, listboxProps] = useSlot('listbox', {\n    elementType: AutocompleteListbox,\n    externalForwardedProps,\n    ownerState,\n    className: classes.listbox,\n    additionalProps: otherListboxProps,\n    ref: listboxRef\n  });\n  const [PaperSlot, paperProps] = useSlot('paper', {\n    elementType: Paper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.paper\n  });\n  const [PopperSlot, popperProps] = useSlot('popper', {\n    elementType: Popper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.popper,\n    additionalProps: {\n      disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      role: 'presentation',\n      anchorEl,\n      open: popupOpen\n    }\n  });\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => ({\n      className: classes.tag,\n      disabled,\n      ...getTagProps(params)\n    });\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => {\n        const {\n          key,\n          ...customTagProps\n        } = getCustomizedTagProps({\n          index\n        });\n        return /*#__PURE__*/_jsx(Chip, {\n          label: getOptionLabel(option),\n          size: size,\n          ...customTagProps,\n          ...externalForwardedProps.slotProps.chip\n        }, key);\n      });\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push(/*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    const {\n      key,\n      ...otherProps\n    } = props2;\n    return /*#__PURE__*/_jsx(\"li\", {\n      ...otherProps,\n      children: getOptionLabel(option)\n    }, key);\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...optionProps,\n      className: classes.option\n    }, option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = externalForwardedProps.slotProps.clearIndicator;\n  const popupIndicatorSlotProps = externalForwardedProps.slotProps.popupIndicator;\n  const renderAutocompletePopperChildren = children => /*#__PURE__*/_jsx(AutocompletePopper, {\n    as: PopperSlot,\n    ...popperProps,\n    children: /*#__PURE__*/_jsx(AutocompletePaper, {\n      as: PaperSlot,\n      ...paperProps,\n      children: children\n    })\n  });\n  let autocompletePopper = null;\n  if (groupedOptions.length > 0) {\n    autocompletePopper = renderAutocompletePopperChildren(\n    /*#__PURE__*/\n    // TODO v7: remove `as` prop and move ListboxComponentProp to externalForwardedProps or remove ListboxComponentProp entirely\n    // https://github.com/mui/material-ui/pull/43994#issuecomment-2401945800\n    _jsx(ListboxSlot, {\n      as: ListboxComponentProp,\n      ...listboxProps,\n      children: groupedOptions.map((option, index) => {\n        if (groupBy) {\n          return renderGroup({\n            key: option.key,\n            group: option.group,\n            children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n          });\n        }\n        return renderListOption(option, index);\n      })\n    }));\n  } else if (loading && groupedOptions.length === 0) {\n    autocompletePopper = renderAutocompletePopperChildren(/*#__PURE__*/_jsx(AutocompleteLoading, {\n      className: classes.loading,\n      ownerState: ownerState,\n      children: loadingText\n    }));\n  } else if (groupedOptions.length === 0 && !freeSolo && !loading) {\n    autocompletePopper = renderAutocompletePopperChildren(/*#__PURE__*/_jsx(AutocompleteNoOptions, {\n      className: classes.noOptions,\n      ownerState: ownerState,\n      role: \"presentation\",\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      },\n      children: noOptionsText\n    }));\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, {\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      ...getRootProps(other),\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onMouseDown: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          },\n          ...((hasClearIcon || hasPopupIcon) && {\n            endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n              className: classes.endAdornment,\n              ownerState: ownerState,\n              children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, {\n                ...getClearProps(),\n                \"aria-label\": clearText,\n                title: clearText,\n                ownerState: ownerState,\n                ...clearIndicatorSlotProps,\n                className: clsx(classes.clearIndicator, clearIndicatorSlotProps?.className),\n                children: clearIcon\n              }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, {\n                ...getPopupIndicatorProps(),\n                disabled: disabled,\n                \"aria-label\": popupOpen ? closeText : openText,\n                title: popupOpen ? closeText : openText,\n                ownerState: ownerState,\n                ...popupIndicatorSlotProps,\n                className: clsx(classes.popupIndicator, popupIndicatorSlotProps?.className),\n                children: popupIcon\n              }) : null]\n            })\n          })\n        },\n        inputProps: {\n          className: classes.input,\n          disabled,\n          readOnly,\n          ...getInputProps()\n        }\n      })\n    }), anchorEl ? autocompletePopper : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`, `\"blur\"`, `\"selectOption\"`, `\"removeOption\"`\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * A list of options that will be shown in the Autocomplete.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    chip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    listbox: PropTypes.elementType,\n    paper: PropTypes.elementType,\n    popper: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","'use client';\n\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\nfunction stripDiacritics(string) {\n  return string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.startsWith(input) : candidate.includes(input);\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.parentElement?.contains(document.activeElement);\nconst MULTIPLE_DEFAULT_VALUE = [];\nfunction useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel: getOptionLabelProp = option => option.label ?? option,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue, reason) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, reason);\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value,\n    inputValue\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value, 'reset');\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {\n        // The next option is available\n        return nextFocus;\n      }\n\n      // The next option is disabled, move to the next element.\n      // with looped index\n      if (direction === 'next') {\n        nextFocus = (nextFocus + 1) % filteredOptions.length;\n      } else {\n        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;\n      }\n\n      // We end up with initial index, that means we don't have available options.\n      // All of them are disabled\n      if (nextFocus === index) {\n        return -1;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    let listboxNode = listboxRef.current;\n    if (listboxRef.current.getAttribute('role') !== 'listbox') {\n      listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n    }\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const getPreviousHighlightedOptionIndex = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        return filteredOptions.findIndex(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n      }\n    }\n    return -1;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed\n    // If it exists and the value and the inputValue haven't changed, just update its index, otherwise continue execution\n    const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();\n    if (previousHighlightedOptionIndex !== -1) {\n      highlightedIndexRef.current = previousHighlightedOptionIndex;\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && value.findIndex(val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = filteredOptions.findIndex(optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = newValue.findIndex(valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue, reason);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && !['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          // Remove the value on the left of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          // Remove the value on the right of the \"cursor\"\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value, 'blur');\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseMove = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    if (highlightedIndexRef.current !== index) {\n      setHighlightedIndex({\n        event,\n        index,\n        reason: 'mouse'\n      });\n    }\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = event => {\n    // Prevent focusing the input if click is anywhere outside the Autocomplete\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (!disabledProp && (inputValue === '' || !open)) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => ({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null,\n      ...other,\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperatively so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      type: 'button',\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => ({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1,\n      ...(!readOnly && {\n        onDelete: handleTagDelete(index)\n      })\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionKey?.(option) ?? getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseMove: handleOptionMouseMove,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}\nexport default useAutocomplete;","'use client';\n\nimport * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;"],"names":["getListSubheaderUtilityClass","slot","generateUtilityClass","generateUtilityClasses","ListSubheaderRoot","styled","name","overridesResolver","props","styles","ownerState","root","color","capitalize","disableGutters","gutters","inset","disableSticky","sticky","memoTheme","theme","boxSizing","lineHeight","listStyle","vars","palette","text","secondary","fontFamily","typography","fontWeight","fontWeightMedium","fontSize","pxToRem","variants","style","primary","main","paddingLeft","paddingRight","position","top","zIndex","backgroundColor","background","paper","ListSubheader","inProps","ref","className","component","other","classes","slots","composeClasses","useUtilityClasses","as","clsx","muiSkipListHighlight","d","getAutocompleteUtilityClass","_ClearIcon","_ArrowDropDownIcon","AutocompleteRoot","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","size","tag","inputRoot","input","focused","clearIndicator","visibility","margin","maxWidth","width","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","sizeSmall","outlinedInputClasses","endAdornment","right","paddingTop","filledInputClasses","hiddenLabel","flexGrow","textOverflow","opacity","multiple","flexWrap","AutocompleteEndAdornment","transform","AutocompleteClearIndicator","IconButton","marginRight","AutocompletePopupIndicator","popupIndicator","popupOpen","popupIndicatorOpen","AutocompletePopper","Popper","option","popper","disablePortal","popperDisablePortal","modal","AutocompletePaper","Paper","body1","overflow","AutocompleteLoading","loading","AutocompleteNoOptions","noOptions","AutocompleteListbox","listbox","maxHeight","minHeight","display","justifyContent","alignItems","cursor","outline","WebkitTapHighlightColor","breakpoints","up","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","mainChannel","selectedOpacity","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","groupLabel","AutocompleteGroupUl","groupUl","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","ChipPropsProp","clearIcon","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionDisabled","getOptionKey","getOptionLabel","getOptionLabelProp","isOptionEqualToValue","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValue","inputValueProp","limitTags","ListboxComponent","ListboxComponentProp","ListboxProps","ListboxPropsProp","loadingText","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","PaperComponent","PaperComponentProp","PopperComponent","PopperComponentProp","popupIcon","ArrowDropDown","A","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","value","valueProp","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","expanded","focusedTag","anchorEl","setAnchorEl","groupedOptions","useAutocomplete","componentName","onMouseDown","handleInputMouseDown","listboxRef","otherListboxProps","label","externalForwardedProps","chip","ListboxSlot","listboxProps","useSlot","elementType","additionalProps","PaperSlot","paperProps","PopperSlot","popperProps","clientWidth","role","startAdornment","length","getCustomizedTagProps","params","map","index","key","customTagProps","Chip","Array","isArray","splice","push","children","group","props2","otherProps","renderListOption","optionProps","clearIndicatorSlotProps","popupIndicatorSlotProps","renderAutocompletePopperChildren","autocompletePopper","option2","index2","event","preventDefault","undefined","InputLabelProps","InputProps","target","currentTarget","title","inputProps","stripDiacritics","string","normalize","replace","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","toLowerCase","filteredOptions","filter","candidate","startsWith","includes","slice","defaultFilterOptions","defaultIsActiveElementInListbox","current","parentElement","contains","document","activeElement","MULTIPLE_DEFAULT_VALUE","unstable_isActiveElementInListbox","unstable_classNamePrefix","disabledProp","openProp","optionLabel","String","ignoreFocus","firstFocus","inputRef","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","controlled","default","setInputValueState","state","setFocused","resetInputValue","newValue","reason","newInputValue","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","some","value2","previousProps","valueChange","listboxAvailable","focusTag","tagToFocus","querySelector","setHighlightedIndex","removeAttribute","setAttribute","prev","classList","remove","listboxNode","getAttribute","scrollTop","add","scrollHeight","clientHeight","element","scrollBottom","elementBottom","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","nextFocus","nextFocusDisabled","hasAttribute","validOptionIndex","maxIndex","newIndex","Math","abs","getNextIndex","indexOf","setSelectionRange","syncHighlightedIndex","previousHighlightedOptionIndex","every","val","i","value1","previousHighlightedOption","findIndex","getPreviousHighlightedOptionIndex","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","onKeyDown","defaultMuiPrevented","which","stopPropagation","handleFocus","handleBlur","handleInputChange","handleOptionMouseMove","Number","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","Map","reduce","acc","onClick","htmlFor","onBlur","onFocus","autoCapitalize","spellCheck","tabIndex","type","onDelete","onMouseMove","onTouchStart"],"sourceRoot":""}