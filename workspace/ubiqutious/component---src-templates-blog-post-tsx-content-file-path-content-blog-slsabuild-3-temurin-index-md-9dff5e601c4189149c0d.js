"use strict";(self.webpackChunkadoptium_website=self.webpackChunkadoptium_website||[]).push([[6805],{314:function(e,t,n){n.r(t),n.d(t,{Head:function(){return S},default:function(){return k},formatDiv:function(){return E}});var a=n(8453),l=n(6540);function r(e){const t=Object.assign({h2:"h2",p:"p",a:"a",h3:"h3",span:"span",ul:"ul",li:"li"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h2,null,"Introduction"),"\n",l.createElement(t.p,null,"Supply-chain Levels for Software Artifacts, or ",l.createElement(t.a,{href:"https://slsa.dev"},"SLSA"),", is a framework with individual levels that software\nproducers can work towards to make their software more secure, and consumers\ncan use to make decisions based on the software package’s security posture.  The\nAdoptium project has worked closely with the Eclipse Foundation security\nteam to work towards making the Eclipse Temurin compliant with the SLSA\nspecification’s build requirements."),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://adoptium.net/blog/2022/11/slsa2-temurin/"},"At the end"),"\n",l.createElement(t.a,{href:"https://newsroom.eclipse.org/eclipse-newsletter/2022/december/eclipse-temurin-slsa-level-two-compliant"},"of 2022"),"\nwe achieved compliance with level 2 of the SLSA v0.1 specification.  In\nApril 2023 SLSA version 1.0 was released and split the specification into\nmultiple “tracks”, of which the build track is the only one currently\npublished.  If you’re not familiar with the changes, check out\n",l.createElement(t.a,{href:"https://youtu.be/uLXzyutZEmQ?si=XjD9H6uO_GEjJVBG"},"this lightning talk")," from one\nof my colleagues.  We have been able to build on our work done previously to\nmeet build level 3 for Linux and macOS for Eclipse Temurin’s build and\ndistribution."),"\n",l.createElement(t.h2,null,"What have you done since declaring SLSA level 2?"),"\n",l.createElement(t.p,null,"We have built on top of the work covered in the earlier blog to meet the\nrequirements of SLSA build level 3. The additional requirements were as\nfollows:"),"\n",l.createElement(t.h3,null,"Prevent runs from influencing one another, even within the same project"),"\n",l.createElement(t.p,null,"In order to achieve independence between build runs, we perform all of our\nLinux builds in Docker containers. These containers are instantiated, the\nbuild is run and the results saved, and then we shut down the container.\nThis way there can be no influencing from caching or from one run impacting\na subsequent one."),"\n",l.createElement(t.p,null,"We have implemented a comparable system on macOS by using\n",l.createElement(t.a,{href:"https://www.macstadium.com/orka"},"MacStadium’s Orka")," which allows us to dynamically spin up virtual machines for each\nbuild run to give us a comparable level of isolation."),"\n",l.createElement(t.p,null,"For other operating systems that we build on - Windows, AIX and Solaris - we\nare not currently set up to do something equivalent which is why we are not\nclaiming SLSA build level 3 for those builds."),"\n",l.createElement(t.h3,null,"Verifying provenance artifacts"),"\n",l.createElement(t.p,null,"We have introduced a build verification step which can take the Software\nBill of Materials (SBoM) produced as part of the build output and verify its\ncontents as far as is practical.  This will do some checks to ensure that\nthe fields are valid and match expectations about how the product has been\nbuilt.  This job is stored in\n",l.createElement(t.a,{href:"https://github.com/adoptium/temurin-build/blob/master/tooling"},"https://github.com/adoptium/temurin-build/blob/master/tooling")," as\nrelease_download_test.sh which performs SHA and GPG checks as well as\nrunning some basic checks on the downloads.  It also calls\nvalidateSBOMcontent.sh to check the SBoM contents to make sure the\ndependencies, including compilers, listed in there match expectations.  The\nSBoM contents now also includes the SHA256 checksums of all of the build\nartifacts in the ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">components</code>'}})," section.  There is information on\nprogramatically verifying the GPG signatures in\n",l.createElement(t.a,{href:"https://adoptium.net/blog/2022/07/gpg-signed-releases/"},"an earlier blog")),"\n",l.createElement(t.p,null,"In addition to all these checks we also verify after each build that the\nbuild code has the features enabled that it should have. This is done using\na custom AQA test job called “smoke tests” which use the tests in the build\nrepository in the\n",l.createElement(t.a,{href:"https://github.com/adoptium/temurin-build/tree/master/test/functional/buildAndPackage"},"buildAndPackage"),"\ndirectory and test various aspects of the built JDK If these checks fail\nthen these will be trapped early on."),"\n",l.createElement(t.p,null,"We expect that all of these checks will be enhanced over time, particularly\nas we add more details into the SBoM."),"\n",l.createElement(t.p,null,"The current SBoM can be downloaded via the adoptium API.  If you are already\nfamiliar with the API for downloading JDKs, then replacing ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jdk</code>'}})," with ",l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sbom</code>'}}),"\nin the URL will let you download the SBoM. For example, this will download\nthe latest GA SBoM for Temurin 21 on Linux/x64:"),"\n",l.createElement(t.ul,null,"\n",l.createElement(t.li,null,l.createElement(t.a,{href:"https://api.adoptium.net/v3/binary/latest/21/ga/linux/x64/sbom/hotspot/normal/eclipse"},"https://api.adoptium.net/v3/binary/latest/21/ga/linux/x64/sbom/hotspot/normal/eclipse")),"\n"),"\n",l.createElement(t.p,null,"Note that there is an enhanced version of the SBoM which includes more\ndetails on the artifacts that is already in the nightly builds and will be\nincluded for the January 2024 GA releases and beyond.  We will not (and\nshould not) regenerate the SBoM for older releases."),"\n",l.createElement(t.h3,null,"Prevent secret material used to sign the provenance from being accessible to user-defined build steps"),"\n",l.createElement(t.p,null,"The signing jobs that we use are all contained within our Jenkins CI system.\nThese are independent of the build jobs and run as a\nsubsequent step to avoid the credentials ever being available to the build\njobs."),"\n",l.createElement(t.h2,null,"What’s in the future?"),"\n",l.createElement(t.p,null,"At the moment SLSA build level 3 is the highest level available. We will\nlook to keep up to date as updates to the specification are made available.\nWe expect a “level 4” on the build track, and also other tracks to cover\nsource code."),"\n",l.createElement(t.p,null,"We are also continuing to work on our ",l.createElement(t.a,{href:"https://adoptium.net/blog/2023/09/Reproducible-Comparison-Builds/"},"reproducible builds")," which gives an\nextra layer of confidence that any customers of Temurin are able to rebuild\nfrom source code in order to independently verify that nothing in our build\nsystems have been tampered with or introduced any unexpected code.  Anyone\n(yes, even you!) can use our fully open-source setup and build scripts to\nrebuild the Temurin JDK, and we encourage you to give it a try!"))}var o=function(e={}){const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)},i=n(4755),s=n(1197),c=n(5895),u=n(8297),d=n(720),h=n(9694),m=n(548),p=n(1169),f=n(1939),b=n(9122),g=n(279);function w(){return w=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)({}).hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},w.apply(null,arguments)}const E=e=>e.dangerouslySetInnerHTML.__html.includes('class="language-text"')?l.createElement("code",e):l.createElement("div",e),v={GuestPost:h.A,blockquote:e=>l.createElement("blockquote",w({style:{paddingLeft:"1.5rem",borderLeft:".3rem solid hsla(0,0%,0%,0.9)"},className:"blockquote"},e)),table:e=>l.createElement("table",w({className:"table table-hover"},e)),thead:e=>l.createElement("thead",w({className:"table-dark"},e)),li:e=>l.createElement("li",w({style:{marginBottom:"1.5em"}},e)),img:e=>l.createElement(g.A,e),div:E},y=({data:e,pageContext:t,location:n,children:r})=>{const o=e.mdx,{previous:c,next:h}=t,g=d[o.frontmatter.author],w=o.frontmatter.tags;return l.createElement(s.A,null,l.createElement("section",{className:"py-5 container"},l.createElement("div",{className:"row py-lg-5"},l.createElement("div",{className:"col-lg-9 col-md-9 mx-auto"},l.createElement("article",null,l.createElement("header",{className:"pb-5"},l.createElement("h1",{className:"mb-0",style:{fontWeight:"900"}},o.frontmatter.title),l.createElement(m.A,{date:o.frontmatter.date,author:g.name,identifier:o.frontmatter.author}),l.createElement(p.A,{location:n,siteMetadata:e.site.siteMetadata,post:o.frontmatter})),l.createElement(a.xA,{components:v},r),l.createElement(f.A,{tags:w}),l.createElement(b.A,null),l.createElement("hr",{className:"p-3"}),l.createElement("footer",{className:"pb-5"},l.createElement(u.Ay,{identifier:o.frontmatter.author,author:g}))),l.createElement("div",null,l.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},l.createElement("li",null,h&&l.createElement(i.Link,{to:h.fields.postPath,rel:"next"},"← ",h.frontmatter.title)),l.createElement("li",null,c&&l.createElement(i.Link,{to:c.fields.postPath,rel:"prev"},c.frontmatter.title," →"))))))))};function k(e){return l.createElement(y,e,l.createElement(o,e))}const S=({data:e})=>{const t=e.mdx;let n="";return t.frontmatter&&t.frontmatter.featuredImage&&(n=t.frontmatter.featuredImage.childImageSharp.gatsbyImageData.images.fallback.src),l.createElement(c.A,{title:t.frontmatter.title,description:t.frontmatter.description||t.excerpt,twitterCard:n})}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-slsabuild-3-temurin-index-md-9dff5e601c4189149c0d.js.map